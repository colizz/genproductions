diff --git a/Template/LO/bin/generate_events b/Template/LO/bin/generate_events
index df61ad9..604025b 100755
--- a/Template/LO/bin/generate_events
+++ b/Template/LO/bin/generate_events
@@ -106,25 +106,25 @@ def treat_old_argument(argument):
     try:
         mode = int(argument[1])
     except:
-        mode = int(raw_input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
+        mode = int(input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
     if mode == 0:
         try:
             name = argument[2]
         except:
-            name = raw_input('Enter run name\n')
+            name = input('Enter run name\n')
     else:
         try:
             opt = argument[2]
         except:
             if mode == 1: 
-                opt = raw_input('Enter name for jobs on pbs queue\n')
+                opt = input('Enter name for jobs on pbs queue\n')
             else:
-                opt = int(raw_input('Enter number of cores\n'))
+                opt = int(input('Enter number of cores\n'))
         
         try:
             name = argument[3]
         except:
-            name = raw_input('enter run name\n')
+            name = input('enter run name\n')
 
 #    launch = ME.MadEventCmd(me_dir=root_path)
         
diff --git a/Template/LO/bin/madevent b/Template/LO/bin/madevent
index e58cde2..8bf062f 100755
--- a/Template/LO/bin/madevent
+++ b/Template/LO/bin/madevent
@@ -67,7 +67,7 @@ for i in range(len(sys.argv)-1):
     try:
         (options, args) = parser.parse_args(sys.argv[1:len(sys.argv)-i])
         done = True
-    except MyOptParser.InvalidOption, error:
+    except MyOptParser.InvalidOption as error:
         pass 
     else:
         args += sys.argv[len(sys.argv)-i:]
@@ -75,8 +75,8 @@ if not done:
     # raise correct error:
     try:
         (options, args) = parser.parse_args()
-    except MyOptParser.InvalidOption, error:
-        print error
+    except MyOptParser.InvalidOption as error:
+        print(error)
         sys.exit(2)  
 
 if len(args) == 0:
@@ -87,7 +87,7 @@ import subprocess
 # Check if optimize mode is (and should be) activated
 if __debug__ and not options.debug and \
     (not os.path.exists(os.path.join(root_path,'../..', 'bin','create_release.py')) or options.web):
-        print 'launch in debug mode'
+        print('launch in debug mode')
         subprocess.call([sys.executable] + ['-O'] + sys.argv)
         sys.exit()
 
@@ -100,7 +100,7 @@ except ImportError:
     try:
         import pyreadline as readline
     except:
-        print "For tab completion and history, install module readline."
+        print("For tab completion and history, install module readline.")
 else:
     import rlcompleter
 
@@ -131,7 +131,7 @@ except:
    pass
 
 if __debug__:
-        print 'Running MG5 in debug mode'
+        print('Running MG5 in debug mode')
 
 
 # Set logging level according to the logging level given by options
@@ -183,10 +183,10 @@ try:
                 cmd_line = cmd_interface.MadEventCmdShell(force_run=True)
             if not hasattr(cmd_line, 'do_%s' % args[0]):
                 if parser_error:
-                    print parser_error
-                    print 'and %s  can not be interpreted as a valid command.' % args[0]
+                    print(parser_error)
+                    print('and %s  can not be interpreted as a valid command.' % args[0])
                 else:
-                    print 'ERROR: %s  not a valid command. Please retry' % args[0]
+                    print('ERROR: %s  not a valid command. Please retry' % args[0])
             else:
                 cmd_line.use_rawinput = False    
                 cmd_line.run_cmd(' '.join(args))
@@ -200,9 +200,9 @@ try:
                 cmd_line = cmd_interface.MadEventCmdShell(force_run=True)
                 cmd_line.cmdloop()
 except KeyboardInterrupt:
-    print 'writting history and directory and quit on KeyboardInterrupt' 
+    print('writting history and directory and quit on KeyboardInterrupt') 
     pass
-except cmd_interface.MadEventAlreadyRunning, error:
+except cmd_interface.MadEventAlreadyRunning as error:
     logging.error(str(error))
     sys.exit(1)
 
diff --git a/Template/NLO/bin/aMCatNLO b/Template/NLO/bin/aMCatNLO
index 30bc3a9..6a4b190 100755
--- a/Template/NLO/bin/aMCatNLO
+++ b/Template/NLO/bin/aMCatNLO
@@ -66,7 +66,7 @@ for i in range(len(sys.argv)-1):
     try:
         (options, args) = parser.parse_args(sys.argv[1:len(sys.argv)-i])
         done = True
-    except MyOptParser.InvalidOption, error:
+    except MyOptParser.InvalidOption as error:
         pass 
     else:
         args += sys.argv[len(sys.argv)-i:]
@@ -74,8 +74,8 @@ if not done:
     # raise correct error:
     try:
         (options, args) = parser.parse_args()
-    except MyOptParser.InvalidOption, error:
-        print error
+    except MyOptParser.InvalidOption as error:
+        print(error)
         sys.exit(2)  
 
 if len(args) == 0:
@@ -86,7 +86,7 @@ import subprocess
 # Check if optimize mode is (and should be) activated
 if __debug__ and not options.debug and \
     (not os.path.exists(os.path.join(root_path,'../..', 'bin','create_release.py')) or options.web):
-        print 'launch in debug mode'
+        print('launch in debug mode')
         subprocess.call([sys.executable] + ['-O'] + sys.argv)
         sys.exit()
 
@@ -99,7 +99,7 @@ except ImportError:
     try:
         import pyreadline as readline
     except:
-        print "For tab completion and history, install module readline."
+        print("For tab completion and history, install module readline.")
 else:
     import rlcompleter
 
@@ -130,7 +130,7 @@ except:
    pass
 
 if __debug__:
-        print 'Running MG5 in debug mode'
+        print('Running MG5 in debug mode')
 
 
 # Set logging level according to the logging level given by options
@@ -177,10 +177,10 @@ try:
             cmd_line = cmd_interface.aMCatNLOCmdShell()
         if not hasattr(cmd_line, 'do_%s' % args[0]):
             if parser_error:
-                print parser_error
-                print 'and %s  can not be interpreted as a valid command.' % args[0]
+                print(parser_error)
+                print('and %s  can not be interpreted as a valid command.' % args[0])
             else:
-                print 'ERROR: %s  not a valid command. Please retry' % args[0]
+                print('ERROR: %s  not a valid command. Please retry' % args[0])
         else:
             cmd_line.use_rawinput = False    
             cmd_line.run_cmd(' '.join(args))
@@ -195,9 +195,9 @@ try:
             cmd_line.cmdloop()
             
 except KeyboardInterrupt:
-    print 'writting history and directory and quit on KeyboardInterrupt' 
+    print('writting history and directory and quit on KeyboardInterrupt') 
     pass
-except cmd_interface.aMCatNLOAlreadyRunning, error:
+except cmd_interface.aMCatNLOAlreadyRunning as error:
     logging.error(str(error))
     sys.exit()
 try: 
@@ -212,7 +212,7 @@ try:
     if cmd_line.history[-1] not in ['EOF','quit','exit']:
         cmd_line.results.store_result()
 except:
-    print error
+    print(error)
     pass
 
 
diff --git a/Template/NLO/bin/calculate_xsect b/Template/NLO/bin/calculate_xsect
index 14f6f0a..1d6d3b2 100755
--- a/Template/NLO/bin/calculate_xsect
+++ b/Template/NLO/bin/calculate_xsect
@@ -54,25 +54,25 @@ def treat_old_argument(argument):
     try:
         mode = int(argument[1])
     except:
-        mode = int(raw_input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
+        mode = int(input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
     if mode == 0:
         try:
             name = argument[2]
         except:
-            name = raw_input('Enter run name\n')
+            name = input('Enter run name\n')
     else:
         try:
             opt = argument[2]
         except:
             if mode == 1: 
-                opt = raw_input('Enter name for jobs on pbs queue\n')
+                opt = input('Enter name for jobs on pbs queue\n')
             else:
-                opt = int(raw_input('Enter number of cores\n'))
+                opt = int(input('Enter number of cores\n'))
         
         try:
             name = argument[3]
         except:
-            name = raw_input('enter run name\n')
+            name = input('enter run name\n')
 
 #    launch = ME.MadEventCmd(me_dir=root_path)
         
diff --git a/Template/NLO/bin/generate_events b/Template/NLO/bin/generate_events
index 7a44d5f..a763cf9 100755
--- a/Template/NLO/bin/generate_events
+++ b/Template/NLO/bin/generate_events
@@ -54,25 +54,25 @@ def treat_old_argument(argument):
     try:
         mode = int(argument[1])
     except:
-        mode = int(raw_input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
+        mode = int(input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
     if mode == 0:
         try:
             name = argument[2]
         except:
-            name = raw_input('Enter run name\n')
+            name = input('Enter run name\n')
     else:
         try:
             opt = argument[2]
         except:
             if mode == 1: 
-                opt = raw_input('Enter name for jobs on pbs queue\n')
+                opt = input('Enter name for jobs on pbs queue\n')
             else:
-                opt = int(raw_input('Enter number of cores\n'))
+                opt = int(input('Enter number of cores\n'))
         
         try:
             name = argument[3]
         except:
-            name = raw_input('enter run name\n')
+            name = input('enter run name\n')
 
 #    launch = ME.MadEventCmd(me_dir=root_path)
         
diff --git a/Template/NLO/bin/shower b/Template/NLO/bin/shower
index ef5bba5..828d951 100755
--- a/Template/NLO/bin/shower
+++ b/Template/NLO/bin/shower
@@ -53,25 +53,25 @@ def treat_old_argument(argument):
     try:
         mode = int(argument[1])
     except:
-        mode = int(raw_input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
+        mode = int(input('Enter 2 for multi-core, 1 for parallel, 0 for serial run\n'))
     if mode == 0:
         try:
             name = argument[2]
         except:
-            name = raw_input('Enter run name\n')
+            name = input('Enter run name\n')
     else:
         try:
             opt = argument[2]
         except:
             if mode == 1: 
-                opt = raw_input('Enter name for jobs on pbs queue\n')
+                opt = input('Enter name for jobs on pbs queue\n')
             else:
-                opt = int(raw_input('Enter number of cores\n'))
+                opt = int(input('Enter number of cores\n'))
         
         try:
             name = argument[3]
         except:
-            name = raw_input('enter run name\n')
+            name = input('enter run name\n')
 
 #    launch = ME.MadEventCmd(me_dir=root_path)
         
diff --git a/bin/mg5 b/bin/mg5
index 6300bf7..ac8fb48 100755
--- a/bin/mg5
+++ b/bin/mg5
@@ -17,8 +17,8 @@
 """This is the main executable, a simple frontend to set up the PYTHONPATH
 and call immediately the command line interface scripts"""
 
-from __future__ import absolute_import
-from __future__ import print_function
+
+
 import os
 import sys
 
diff --git a/bin/mg5_aMC b/bin/mg5_aMC
index ef12aaf..dae8d3c 100755
--- a/bin/mg5_aMC
+++ b/bin/mg5_aMC
@@ -1,6 +1,6 @@
 #! /usr/bin/env python3
-from __future__ import absolute_import
-from __future__ import print_function
+
+
 import time
 start = time.time()
 
